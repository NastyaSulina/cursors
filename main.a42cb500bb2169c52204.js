"use strict";(self.webpackChunkfluid_cursor=self.webpackChunkfluid_cursor||[]).push([[792],{361:function(e,n,r){var i=r(338),t=r(540),u=r(437),a=r(922);const o={type:a.ix0,depthBuffer:!1,stencilBuffer:!1,samples:0},v={format:a.paN,minFilter:a.k6q,magFilter:a.k6q,...o},l={format:a.VT0,minFilter:a.hxR,magFilter:a.hxR,...o},s={format:a.GWd,minFilter:a.k6q,magFilter:a.k6q,...o},c="\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = position.xy * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n\n        gl_Position = vec4(position.xy, 0.0, 1.0);\n    }\n",m={depthTest:!1,depthWrite:!1,transparent:!1,blending:a.XIg};class d{x=0;y=0;dx=0;dy=0;moved=!1;color=new a.Pq0(1,1,1);uv=new a.I9Y;lastColorTime=0;hue=Math.random();tmpColor=new a.Q1f;constructor(e,n=150){this.canvas=e,this.colorInterval=n,this.canvas.addEventListener("pointermove",this.handleMove,{passive:!0}),this.canvas.addEventListener("pointerleave",this.handleLeave,{passive:!0})}reset=()=>{this.moved=!1};dispose=()=>{this.canvas.removeEventListener("pointermove",this.handleMove),this.canvas.removeEventListener("pointerleave",this.handleLeave)};handleLeave=()=>{this.moved=!1,this.dx=0,this.dy=0};handleMove=e=>{const n=this.canvas.getBoundingClientRect(),r=e.clientX-n.left,i=e.clientY-n.top;this.dx=8*(r-this.x),this.dy=8*(i-this.y),this.x=r,this.y=i,this.moved=!0,this.uv.set(this.x/this.canvas.clientWidth,1-this.y/this.canvas.clientHeight);const t=performance.now();t-this.lastColorTime>this.colorInterval&&(this.hue=(this.hue+.618033988749895)%1,this.tmpColor.setHSL(this.hue,.9,.4),this.color.set(this.tmpColor.r,this.tmpColor.g,this.tmpColor.b),this.lastColorTime=t)}}const p=(e,n,r)=>{let i=new a.nWS(e,n,r),t=new a.nWS(e,n,r);return{get read(){return i},get write(){return t},swap(){[i,t]=[t,i]}}},f=e=>{e.read.dispose(),e.write.dispose()};var x=r(848);const h=()=>{const e=(0,t.useRef)(null);let n,r,i,o,h,y,g,w;const S=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    void main () {\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        gl_FragColor = dissipation * texture2D(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uVelocity:{value:null},uSource:{value:null},dissipation:{value:.999},dt:{value:0}}}),[]),D=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uTarget:{value:null},aspectRatio:{value:1},color:{value:new a.Pq0},point:{value:new a.I9Y},radius:{value:.004}}}),[]),T=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main() {\n        vec3 col = texture2D(uTexture, vUv).rgb;\n        col = col / (col + vec3(1.0));\n        col = pow(col, vec3(0.8));        \n        gl_FragColor = vec4(col, 1.0);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uTexture:{value:null}}}),[]),B=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uVelocity:{value:null}}}),[]),C=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n        vec2 force = vec2(abs(T) - abs(B), 0.0);\n        force *= 1.0 / length(force + 0.00001) * curl * C;\n        vec2 vel = texture2D(uVelocity, vUv).xy;\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uVelocity:{value:null},uCurl:{value:null},curl:{value:3},dt:{value:0}}}),[]),V=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n\n    vec2 sampleVelocity (in vec2 uv) {\n        vec2 multiplier = vec2(1.0, 1.0);\n        if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }\n        if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }\n        if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }\n        if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }\n        return multiplier * texture2D(uVelocity, uv).xy;\n    }\n\n    void main () {\n        float L = sampleVelocity(vL).x;\n        float R = sampleVelocity(vR).x;\n        float T = sampleVelocity(vT).y;\n        float B = sampleVelocity(vB).y;\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uVelocity:{value:null}}}),[]),R=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uTexture:{value:null},value:{value:.96}}}),[]),z=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    vec2 boundary (in vec2 uv) {\n        uv = min(max(uv, 0.0), 1.0);\n        return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uPressure:{value:null},uDivergence:{value:null}}}),[]),L=(0,t.useMemo)(()=>new a.BKk({...m,vertexShader:c,fragmentShader:"\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    vec2 boundary (in vec2 uv) {\n        uv = min(max(uv, 0.0), 1.0);\n        return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n",uniforms:{texelSize:{value:new a.I9Y},uVelocity:{value:null},uPressure:{value:null}}}),[]);let U=performance.now();return(0,t.useEffect)(()=>{const t=e.current,c=new u.JeP({canvas:t,antialias:!1,alpha:!1,depth:!1,stencil:!1,powerPreference:"high-performance"});c.autoClear=!1,c.setPixelRatio(1);const m=new d(t,200),x=new a.Z58,P=new a.i7d,b=new a.eaF(new a.bdM(2,2),new a.V9B);x.add(b);const F=()=>{n&&(f(n),f(r),f(i),o.dispose(),h.dispose()),y=Math.max(1,Math.floor(t.clientWidth/1)),g=Math.max(1,Math.floor(t.clientHeight/1)),w=new a.I9Y(1/y,1/g),c.setSize(t.clientWidth,t.clientHeight,!1),n=p(y,g,v),r=p(y,g,s),i=p(y,g,l),o=new a.nWS(y,g,l),h=new a.nWS(y,g,l),D.uniforms.texelSize.value=w,S.uniforms.texelSize.value=w,B.uniforms.texelSize.value=w,C.uniforms.texelSize.value=w,V.uniforms.texelSize.value=w,R.uniforms.texelSize.value=w,z.uniforms.texelSize.value=w,L.uniforms.texelSize.value=w,T.uniforms.texelSize.value=w,D.uniforms.aspectRatio.value=y/g,D.uniforms.radius.value=.004,C.uniforms.curl.value=3,R.uniforms.value.value=.96,U=performance.now()};F(),window.addEventListener("resize",F);const M=(e,n)=>{b.material=e,c.setRenderTarget(n),c.render(x,P),c.setRenderTarget(null)};let k=0;const I=e=>{k=requestAnimationFrame(I);const t=Math.min((e-U)/1e3,.016);U=e,S.uniforms.uVelocity.value=n.read.texture,S.uniforms.uSource.value=n.read.texture,S.uniforms.dissipation.value=.999,S.uniforms.dt.value=t,M(S,n.write),n.swap(),S.uniforms.uVelocity.value=n.read.texture,S.uniforms.uSource.value=r.read.texture,S.uniforms.dissipation.value=.98,M(S,r.write),r.swap(),m.moved&&(D.uniforms.uTarget.value=n.read.texture,D.uniforms.point.value.copy(m.uv),D.uniforms.color.value.set(m.dx,-m.dy,1),M(D,n.write),n.swap(),D.uniforms.uTarget.value=r.read.texture,D.uniforms.color.value.copy(m.color).multiplyScalar(1.5),M(D,r.write),r.swap(),m.reset()),B.uniforms.uVelocity.value=n.read.texture,M(B,o),C.uniforms.uVelocity.value=n.read.texture,C.uniforms.uCurl.value=o.texture,C.uniforms.dt.value=t,M(C,n.write),n.swap(),V.uniforms.uVelocity.value=n.read.texture,M(V,h),R.uniforms.uTexture.value=i.read.texture,M(R,i.write),i.swap(),z.uniforms.uDivergence.value=h.texture;for(let e=0;e<30;e++)z.uniforms.uPressure.value=i.read.texture,M(z,i.write),i.swap();L.uniforms.uPressure.value=i.read.texture,L.uniforms.uVelocity.value=n.read.texture,M(L,n.write),n.swap(),T.uniforms.uTexture.value=r.read.texture,M(T,null)};return k=requestAnimationFrame(I),()=>{cancelAnimationFrame(k),window.removeEventListener("resize",F),m.dispose(),f(n),f(r),f(i),o.dispose(),h.dispose(),b.geometry.dispose(),b.material.dispose(),S.dispose(),D.dispose(),B.dispose(),C.dispose(),V.dispose(),R.dispose(),z.dispose(),L.dispose(),T.dispose(),c.dispose()}},[]),(0,x.jsx)("canvas",{ref:e,className:"a2d72a142c545f5266d5"})},y=()=>(0,x.jsx)(h,{});(0,i.createRoot)(document.getElementById("root")).render((0,x.jsx)(t.StrictMode,{children:(0,x.jsx)(y,{})}))}},function(e){e.O(0,[851],function(){return e(e.s=361)}),e.O()}]);